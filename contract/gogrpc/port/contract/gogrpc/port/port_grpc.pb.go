// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: contract/protobuf/port/port.proto

package port

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Port_GetAvailablePorts_FullMethodName = "/port.Port/GetAvailablePorts"
	Port_OpenPorts_FullMethodName         = "/port.Port/OpenPorts"
)

// PortClient is the client API for Port service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortClient interface {
	GetAvailablePorts(ctx context.Context, in *PortAssignRequest, opts ...grpc.CallOption) (*PortAssignResponse, error)
	OpenPorts(ctx context.Context, in *OpenPortsRequest, opts ...grpc.CallOption) (*OpenPortsResponse, error)
}

type portClient struct {
	cc grpc.ClientConnInterface
}

func NewPortClient(cc grpc.ClientConnInterface) PortClient {
	return &portClient{cc}
}

func (c *portClient) GetAvailablePorts(ctx context.Context, in *PortAssignRequest, opts ...grpc.CallOption) (*PortAssignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortAssignResponse)
	err := c.cc.Invoke(ctx, Port_GetAvailablePorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) OpenPorts(ctx context.Context, in *OpenPortsRequest, opts ...grpc.CallOption) (*OpenPortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenPortsResponse)
	err := c.cc.Invoke(ctx, Port_OpenPorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServer is the server API for Port service.
// All implementations must embed UnimplementedPortServer
// for forward compatibility.
type PortServer interface {
	GetAvailablePorts(context.Context, *PortAssignRequest) (*PortAssignResponse, error)
	OpenPorts(context.Context, *OpenPortsRequest) (*OpenPortsResponse, error)
	mustEmbedUnimplementedPortServer()
}

// UnimplementedPortServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortServer struct{}

func (UnimplementedPortServer) GetAvailablePorts(context.Context, *PortAssignRequest) (*PortAssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePorts not implemented")
}
func (UnimplementedPortServer) OpenPorts(context.Context, *OpenPortsRequest) (*OpenPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPorts not implemented")
}
func (UnimplementedPortServer) mustEmbedUnimplementedPortServer() {}
func (UnimplementedPortServer) testEmbeddedByValue()              {}

// UnsafePortServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServer will
// result in compilation errors.
type UnsafePortServer interface {
	mustEmbedUnimplementedPortServer()
}

func RegisterPortServer(s grpc.ServiceRegistrar, srv PortServer) {
	// If the following call pancis, it indicates UnimplementedPortServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Port_ServiceDesc, srv)
}

func _Port_GetAvailablePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetAvailablePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetAvailablePorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetAvailablePorts(ctx, req.(*PortAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_OpenPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).OpenPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_OpenPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).OpenPorts(ctx, req.(*OpenPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Port_ServiceDesc is the grpc.ServiceDesc for Port service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Port_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailablePorts",
			Handler:    _Port_GetAvailablePorts_Handler,
		},
		{
			MethodName: "OpenPorts",
			Handler:    _Port_OpenPorts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/protobuf/port/port.proto",
}
